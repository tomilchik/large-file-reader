<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>idt-test</groupId>
  <artifactId>idt-test</artifactId>
  <version>0.0.2</version>
  <name>idt-test</name>
  <packaging>jar</packaging>
  
  <!-- 
  Learning: Artifactory. Remove/commentout when not needed.
  This deploys the build artifacts to AF. 
  This will only be invoked when mvn deploy.
  -->
  <distributionManagement>
    <repository>
        <id>central</id>
        <name>69ed9f2be225-releases</name>
        <url>http://localhost:8081/artifactory/largefilereader-mvn-dev-local</url>
    </repository>
    <snapshotRepository>
        <id>snapshots</id>
        <name>69ed9f2be225-snapshots</name>
        <url>http://localhost:8081/artifactory/largefilereader-mvn-dev-local</url>
    </snapshotRepository>
  </distributionManagement>

    <!-- Integraiton with git -->
  <properties>
    <scm.connection />
  </properties>  
    <scm>
        <developerConnection>${scm.connection}</developerConnection>
        <!--  developerConnection>scm:git:https://github.com/tomilchik/large-file-reader</developerConnection-->
      <tag>idt-test-0.0.2</tag>
  </scm>
  
  <dependencies>
  	<!-- ####################### Used in code ##################### -->
	<!-- Gson for JSON processing -->
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.0</version>
	</dependency>
	<!-- Apache Commons CLI for command line processing -->
	<!-- https://mvnrepository.com/artifact/commons-cli/commons-cli -->
	<dependency>
	    <groupId>commons-cli</groupId>
	    <artifactId>commons-cli</artifactId>
	    <version>1.4</version>
	</dependency>
   <!-- Apache Commons Lang -->
   <!-- https://mvnrepository.com/artifact/commons-lang/commons-lang -->
	<dependency>
	    <groupId>commons-lang</groupId>
	    <artifactId>commons-lang</artifactId>
	    <version>2.6</version>
	</dependency>

 	<!-- ############################################ -->

 	<!-- ####################### Used for testing etc. ##################### -->
	<!-- https://mvnrepository.com/artifact/junit/junit -->
	<dependency>
	    <groupId>junit</groupId>
	    <artifactId>junit</artifactId>
	    <version>4.12</version>
	    <scope>test</scope>
	</dependency>
	<!--  Google's JIMFS - in-memory file system. Will use for unit tests. -->
	<dependency>
	  <groupId>com.google.jimfs</groupId>
	  <artifactId>jimfs</artifactId>
	  <version>1.1</version>
	</dependency>
	
	<!-- Mockito -->
	<!-- this is Java 8 compatible
	<dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>1.7.4</version>
      <scope>test</scope>
   </dependency>
   <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>1.7.4</version>
      <scope>test</scope>
   </dependency>
    -->
    
    <!-- this is Java 10 compatible -->
	<dependency>
		<groupId>org.mockito</groupId>
		<artifactId>mockito-core</artifactId>
		<version>2.18.0</version>
	</dependency>

	<dependency>
	  <groupId>org.powermock</groupId>
	  <artifactId>powermock-api-mockito2</artifactId>
	  <version>2.0.0-beta.5</version>
	</dependency>
	<dependency>
		<groupId>org.powermock</groupId>
	  	<artifactId>powermock-module-junit4</artifactId>
	  	<version>2.0.0-beta.5</version>
	</dependency>
    <!-- END: this is Java 10 compatible -->

   <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-site-plugin -->
   <!-- this is needed for "mvn site" (stylecheck) to work -->
	<dependency>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-site-plugin</artifactId>
	    <version>3.7.1</version>
	     <exclusions>
	        <exclusion>  
	          <groupId>org.sonatype.sisu</groupId>
	          <artifactId>sisu-inject-plexus</artifactId>
	        </exclusion>
	      </exclusions> 
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin -->
	<!--  
	<dependency>
	    <groupId>org.sonarsource.scanner.maven</groupId>
	    <artifactId>sonar-maven-plugin</artifactId>
	    <version>3.6.0.1398</version>
	</dependency>
	-->	
	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-dependency-plugin -->
	<dependency>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-dependency-plugin</artifactId>
	    <version>3.0.0</version>
	</dependency>
	<!--    
	<dependency>
	    <groupId>org.codehaus.plexus</groupId>
	    <artifactId>plexus-classworlds</artifactId>
	    <version>2.6.0</version>
	</dependency>
	<dependency>
	    <groupId>org.codehaus.plexus</groupId>
	    <artifactId>plexus-io</artifactId>
	    <version>3.1.1</version>
	</dependency>
 	-->
	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-pmd-plugin -->
	<!-- PMD -->
	<dependency>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-pmd-plugin</artifactId>
	    <version>3.11.0</version>
	</dependency>
	
  </dependencies>

	<!-- ################################################################################ -->
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.10</version>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
            		<source>1.8</source>
            		<target>1.8</target>
        		</configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
            </plugin>
        	     <plugin>
	            	<!--
	            	This plugin will build a full project jar 
	            	(including all Maven dependency jars, unpackaged into the output jars).
	            	
	            	The below used to be true on my machine - but not anymore.
	            	IMPORTANT: 
	            	despite setting the phase to "package" (below) this plugin
	            	** WILL NOT BE TRIGGERED ** by Maven when running "mvn package".
	            	The only way to trigger it is by calling "mvn package shade:shade".  
	            	 -->
	            	<groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-shade-plugin</artifactId>
	                <version>2.4.3</version>
	                <executions>
					     <!-- Run shade goal on package phase -->
					    <execution>
							<phase>package</phase>
							<goals>
								<goal>shade</goal>
							</goals>
						</execution>
					</executions>
					
					<configuration>
						<goalPrefix>pfx</goalPrefix>
						<transformers>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
								<mainClass>com.idt.codechallenge.MatcherRunner</mainClass>
							</transformer>
			  			</transformers>
		            </configuration>
	            </plugin>
	        <plugin>
	        	<!--  adds source code to  separate jar  -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
	   		</plugin> 
	   		<plugin>
	   			<!-- generates javadoc, creates separate jar for it -->
	   			<!-- don't do javadoc. 
	   			Somehow this plugin works from Eclipse, but fails when running mvn outside of it.-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.0</version>
                <configuration>
                    <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
                </configuration>				
                <executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin> 
			<plugin>
	            <groupId>org.jacoco</groupId>
	            <artifactId>jacoco-maven-plugin</artifactId>
	            <version>0.8.3</version>
	            <executions>
	                <execution>
	                    <goals>
	                        <goal>prepare-agent</goal>
	                    </goals>
	                </execution>
	                <execution>
	                    <id>report</id>
	                    <phase>prepare-package</phase>
	                    <goals>
	                        <goal>report</goal>
	                    </goals>
	                </execution>
	            </executions>
	        </plugin>
	        
            <!-- Checkstyle: to run style check (mvn checkstyle:checkstyle) -->
            <!-- alt. configLocation>google_checks.xml</configLocation-->
            <!--  do not run - too much console output
        	<plugin>
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-checkstyle-plugin</artifactId>
	            <version>3.0.0</version>
	            <configuration>
	                <configLocation>sun_checks.xml</configLocation>
					<failsOnError>false</failsOnError>
					<failOnViolation>false</failOnViolation>
 	            </configuration>
	            <executions>
 			       <execution>
            			<goals>
                			<goal>check</goal>
            			</goals>
        			</execution>
    			</executions>
	        </plugin>
	         -->
	        
            <!-- SpotBugs -->
            <!-- DOES NOT WORK with Java 8+ -->
	        <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>3.1.11</version>
                <dependencies>
				    <dependency>
				      <groupId>com.github.spotbugs</groupId>
				      <artifactId>spotbugs</artifactId>
				      <version>4.0.0-beta1</version>
				    </dependency>             
                </dependencies>   
            </plugin>
            <!--  -->       
	        
        </plugins>
        
        <finalName>${project.artifactId}</finalName>
    </build>
    
    <!-- ########################################## -->
    <reporting>
        <!-- these plugins will generate pretty reporting. To run: mvn site -->
	    <plugins>
    	  	<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-project-info-reports-plugin</artifactId>
        		<version>2.6</version>
      		</plugin>
      		<plugin>
      			<!-- JaCoCo (coverage) -->
            	<groupId>org.jacoco</groupId>
            	<artifactId>jacoco-maven-plugin</artifactId>
            	<version>0.8.3</version>
        	</plugin>
        	<plugin>
        		<!-- Checkstyle: to generate report (mvn site) -->
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-checkstyle-plugin</artifactId>
	            <version>3.0.0</version>
	            <configuration>	            
	                <!-- configLocation>google_checks.xml</configLocation-->
	                <configLocation>sun_checks.xml</configLocation>
	            </configuration>
	        </plugin>  
	        <plugin>
	           <!-- SpotBugs -->
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>3.1.8</version>
            </plugin>            
    	</plugins>
  	</reporting>
</project>